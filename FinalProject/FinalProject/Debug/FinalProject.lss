
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000620  00000000  00000000  00000935  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000390  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031b  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "UART.h"
#include "SPI.h"

int main(void)
{
	UART_Init();
  6c:	0e 94 4e 00 	call	0x9c	; 0x9c <UART_Init>
	SPI_Init();
  70:	0e 94 41 00 	call	0x82	; 0x82 <SPI_Init>
	Slave_EN;
  74:	c4 98       	cbi	0x18, 4	; 24
	
	DDRC |= (1<<2);
  76:	a2 9a       	sbi	0x14, 2	; 20
	
	while (1)
	{
		SPI_TxRx(UART_Rx());
  78:	0e 94 57 00 	call	0xae	; 0xae <UART_Rx>
  7c:	0e 94 49 00 	call	0x92	; 0x92 <SPI_TxRx>
  80:	fb cf       	rjmp	.-10     	; 0x78 <main+0xc>

00000082 <SPI_Init>:
#include "SPI.h"

void SPI_Init(){
	DDRB |= (1<<mosi) | (1<<clk) | (1<<ss);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 6b       	ori	r24, 0xB0	; 176
  86:	87 bb       	out	0x17, r24	; 23
	DDRB &=~ (1<<miso);
  88:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1<<SPE) | (1<<MSTR);
  8a:	8d b1       	in	r24, 0x0d	; 13
  8c:	80 65       	ori	r24, 0x50	; 80
  8e:	8d b9       	out	0x0d, r24	; 13
  90:	08 95       	ret

00000092 <SPI_TxRx>:
}

unsigned char SPI_TxRx(unsigned char data){
	SPDR = data;
  92:	8f b9       	out	0x0f, r24	; 15
	while(((SPSR>>SPIF) & 1 ) == 0 );
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <SPI_TxRx+0x2>
	return SPDR;
  98:	8f b1       	in	r24, 0x0f	; 15
  9a:	08 95       	ret

0000009c <UART_Init>:
#include "UART.h"

void UART_Init()
{
	UCSRB |= (1<<RXCIE)| (1<<RXEN);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 69       	ori	r24, 0x90	; 144
  a0:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  a2:	80 b5       	in	r24, 0x20	; 32
  a4:	86 68       	ori	r24, 0x86	; 134
  a6:	80 bd       	out	0x20, r24	; 32
	UBRRL = 103; // Baud rate 9600
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	89 b9       	out	0x09, r24	; 9
  ac:	08 95       	ret

000000ae <UART_Rx>:
}

unsigned char UART_Rx(){
	while(((UCSRA>>RXC)&1)==0);
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <UART_Rx>
	return UDR;
  b2:	8c b1       	in	r24, 0x0c	; 12
}
  b4:	08 95       	ret

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
